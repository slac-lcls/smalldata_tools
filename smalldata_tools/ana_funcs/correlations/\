from pathlib import Path
import h5py as h5
import glob
import os
import numpy as np
import sys
#sys.path.append('/reg/d/psdm/xcs/xcsx41018/results/smalldata_tools/')
#sys.path.append('/reg/d/psdm/xcs/xcsx41018/results/vesp/')

import correlation as corr
import DetObject as dobj
from smalldata_tools.common.base_detector import DetObjectFunc


class Autocorrelation(DetObjectFunc):
    """ 
    """
    def __init__(self, **kwargs):
        """ 
        Args:
            name (str): DetObjectName, default: svdFit
            thresh (list or tuple): low and high pixel intensity tresholds [low, high]
            roi (list or array): [roi0, roi1, roi3, roi4] rectangular ROI coordinates
            mask (str or Path object): path to npy file containing mask
        """
        self._name = kwargs.get('name','autocorrelation')
        super(Autocorrelation, self).__init__(**kwargs)
        self.thresholds = kwargs.get('thresh', [-1e6, 1e6])
        self.correct_illumination = kwargs.get('correct_illumination', False)
        self.roi = kwargs.get('roi', None)
        if 'mask' in kwargs:
            self.mask = np.load(kwargs['mask'])
        else:
            self.mask = None
        if self.mask is not None:
            self.roi = None
        return
    
            
    def setFromDet(self, det):
        """ """
        super(Autocorrelation, self).setFromDet(det)
        return
    
    
    def process(self, img):
        """
        Perform autocorrelation on masked detector images
        """
        if self.roi is not None:
            img = img[self.roi[0]:self.roi[1], self.roi[2]:self.roi[3]]
        img[img<self.thresholds[0]] = 0
        img[img>self.thresholds[1]] = 0
        autocorr = corr.spatial_correlation_fourier(img, mask=self.mask)
        if self.mask is not None:
            cr = img[mask].mean()
        else:
            cr = img.mean()
        output = {
            'img': img,
            'autocorr': autocorr,
            'cr': cr,
        }
        return output
